# -*- coding: utf-8 -*-
"""Set2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aQftq19OYqbLNEwtWEcsWAd3Nfy077qw
"""

import pandas as pd
import numpy as np
from sklearn import linear_model
import matplotlib.pyplot as plt
import seaborn as sns


#dependent variable (y):  WorkWeekHrs , independent variables (x1, x2): Age, CodeRevHrs
#Choosing 5 columns with numeric values, 1 column with text values and 1 column with qualitative data
df = pd.read_csv('survey_results_public.csv', usecols=['YearsCode', 'Age1stCode', 'Age', 'WorkWeekHrs',
                       'CodeRevHrs', 'Hobbyist', 'Sexuality'])

df.dropna(inplace=True)
df.replace(to_replace={'Yes': '1', 'No': '0'}, inplace=True)
#Looking for dependencies between columns
print(df.corr())

# using one-hot encoding 
one_hot = pd.get_dummies(df['Sexuality'])
df = df.drop('Sexuality',axis = 1)
df = df.join(one_hot)

#Calculating the arithmetic mean and the standard deviation
mean1 = (np.mean(df['Age']))
sd1 = np.std(df['Age'])

mean2 = (np.mean(df['WorkWeekHrs']))
sd2 = np.std(df['WorkWeekHrs'])

#Removing outliers using standard deviation
result = df[(df['Age'] >= (mean1 - 2 *sd1))]

#Removing outliers using standard deviation
result2 = result[(result['WorkWeekHrs'] >= (mean2 - 2 *sd2))]

#Removing outliers using standard quantile
quantile2 = result2[(result2['CodeRevHrs'] >= result2['CodeRevHrs'].quantile(.15)) & (result2['CodeRevHrs'] <=
            result2['CodeRevHrs'].quantile(.85))]


#Creating charts
sns.boxplot(y=quantile2['WorkWeekHrs'], x=quantile2['CodeRevHrs'], data=quantile2)
plt.show()
sns.boxplot(y=quantile2['WorkWeekHrs'], x=quantile2['CodeRevHrs'], data=quantile2)
plt.show()

sns.regplot(y=quantile2['WorkWeekHrs'], x=quantile2['Age'])
plt.show()

sns.jointplot(x=quantile2['Age'], y=quantile2['WorkWeekHrs'], data=quantile2, kind='reg')
plt.show()

#Creating linear regression model
regressionl = linear_model.LinearRegression()
regressionl.fit(quantile2[['CodeRevHrs']], quantile2[['WorkWeekHrs']])
print(regressionl.predict([[12]]))
print(regressionl.predict([[40]]))
mse = np.mean((regressionl.predict(quantile2[['CodeRevHrs']]) - quantile2[['WorkWeekHrs']]) ** 2)
print("Error:", mse)

regressionl = linear_model.LinearRegression()
rel.fit(quantile2[['Age', 'CodeRevHrs']], quantile2[['WorkWeekHrs']])
print(regressionl.coef_)
mse = np.mean((regressionl.predict(quantile2[['CodeRevHrs', 'Age']]) - quantile2[['WorkWeekHrs']]) ** 2)
print("Error:", mse)

regressionl = linear_model.LinearRegression()
regressionl.fit(quantile2[['Age', 'CodeRevHrs', 'Hobbyist']], quantile2[['WorkWeekHrs']])
mse = np.mean((regressionl.predict(quantile2[['CodeRevHrs', 'Age', 'Hobbyist']]) - quantile2[['WorkWeekHrs']]) ** 2)
print("Error:", mse)